

export interface Team {
  id: string;
  name: string;
}

export interface Match {
  id: string;
  teamAId: string;
  teamBId: string;
  scoreA?: number;
  scoreB?: number;
  roundName?: string;
  played: boolean;
}

export interface ClassificationZone {
  id:string;
  name: string;
  rankMin: number;
  rankMax: number;
  colorClass: string;
}

export interface Standing {
  teamId: string;
  played: number;
  won: number;
  drawn: number;
  lost: number;
  goalsFor: number;
  goalsAgainst: number;
  goalDifference: number;
  points: number;
  rank?: number;
  classificationZoneName?: string;
  zoneColorClass?: string;
}

export interface Group {
  id: string;
  name: string;
  teamIds: string[];
  matches: Match[];
  classificationZones: ClassificationZone[];
  matchGenerationMode: 'automatic' | 'manual';
  rounds: 1 | 2; // Applicable for 'automatic' mode
}

export interface League {
  id: string;
  name: string;
  teamIds: string[];
  matches: Match[];
  settings: {
    rounds: 1 | 2;
  };
  classificationZones: ClassificationZone[];
  matchGenerationMode: 'automatic' | 'manual'; // Added for league
}

export interface KnockoutRound {
  id: string;
  name: string;
  matches: Match[];
}

export interface KnockoutStage {
  id: string;
  name: string;
  numTeams: number; // Must be a power of 2, e.g., 4, 8, 16
  teamIds: string[]; // Initial teams participating, in order of assignment
  rounds: KnockoutRound[];
  championId?: string;
}

export type AppTheme = 'light' | 'dark' | 'system';

export interface ArchivedWinner {
  id: string;
  tournamentName: string;
  championTeamId: string;
  championTeamName: string;
  dateArchived: string; // ISO string date
  type: 'Liga' | 'Eliminatoria';
}

export interface TournamentDataState {
  teams: Team[];
  groups: Group[];
  league: League | null;
  knockoutStage: KnockoutStage | null;
  isAdmin: boolean;
  theme: AppTheme;
  selectedGroupIdsForExport: string[];
  archivedWinners: ArchivedWinner[]; // New state for historical winners
}

export interface RandomGroupDistributionConfig {
  numGroups: number;
  teamsPerGroup?: number; // If undefined, distribute as evenly as possible
  groupNamePrefix?: string;
  autoGenerateMatches?: boolean;
  roundsPerGroupIfAutoGenerated?: 1 | 2;
}

export interface TournamentActions {
  // Admin
  login: (password: string) => boolean;
  logout: () => void;
  resetTournament: () => void;

  // Theme
  setTheme: (theme: AppTheme) => void;

  // Teams
  addTeam: (name: string) => void;
  editTeam: (id: string, newName: string) => void;
  deleteTeam: (id: string) => void;

  // Groups
  createGroup: (name: string, matchGenerationMode?: 'automatic' | 'manual', rounds?: 1 | 2) => string;
  deleteGroup: (groupId: string) => void;
  addTeamToGroup: (groupId: string, teamId: string) => void;
  removeTeamFromGroup: (groupId: string, teamId: string) => void;

  distributeTeamsRandomlyToGroups: (config: RandomGroupDistributionConfig) => void;
  setGroupMatchGenerationMode: (groupId: string, mode: 'automatic' | 'manual') => void;
  setGroupRounds: (groupId: string, rounds: 1 | 2) => void;
  clearGroupMatches: (groupId: string) => void;
  generateGroupMatches: (groupId: string) => void;
  addManualMatchToGroup: (groupId: string, teamAId: string, teamBId: string) => void;
  removeManualMatchFromGroup: (groupId: string, matchId: string) => void;

  updateGroupMatchScore: (groupId: string, matchId: string, scoreA: number, scoreB: number) => void;
  addGroupClassificationZone: (groupId: string, zone: Omit<ClassificationZone, 'id'>) => void;
  removeGroupClassificationZone: (groupId: string, zoneId: string) => void;

  // League
  setupLeague: (name: string, teamIds: string[], rounds: 1 | 2, matchGenerationMode?: 'automatic' | 'manual') => void;
  deleteLeague: () => void;
  generateLeagueMatches: () => void;
  updateLeagueMatchScore: (matchId: string, scoreA: number, scoreB: number) => void;
  addLeagueClassificationZone: (zone: Omit<ClassificationZone, 'id'>) => void;
  removeLeagueClassificationZone: (zoneId: string) => void;
  setLeagueMatchGenerationMode: (mode: 'automatic' | 'manual') => void;
  addManualMatchToLeague: (teamAId: string, teamBId: string) => void;
  removeManualMatchFromLeague: (matchId: string) => void;
  clearLeagueMatches: () => void;
  setLeagueRounds: (rounds: 1 | 2) => void;

  // Knockout
  setupKnockoutStage: (name: string, numTeams: number, teamIdsInOrder: string[]) => void;
  deleteKnockoutStage: () => void;
  updateKnockoutMatchScore: (roundId: string, matchId: string, scoreA: number, scoreB: number) => void;
  updateKnockoutMatchTeams: (roundId: string, matchId: string, newTeamAId: string, newTeamBId: string) => void;

  // Utility
  getTeamById: (teamId: string) => Team | undefined;
  getGroupStandings: (groupId: string) => Standing[];
  getLeagueStandings: () => Standing[];

  // Export Selection
  toggleSelectGroupForExport: (groupId: string) => void;
  clearSelectedGroupsForExport: () => void;

  // Archived Winners
  addArchivedWinner: (winnerData: { tournamentName: string; championTeamId: string; type: 'Liga' | 'Eliminatoria' }) => void;
  deleteArchivedWinner: (winnerId: string) => void;
  getArchivedWinners: () => ArchivedWinner[];
}

export type StoreState = TournamentDataState & TournamentActions;

// Constants
export const ADMIN_PASSWORD = "123";
